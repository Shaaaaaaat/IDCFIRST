require("dotenv").config();
const { Bot, InlineKeyboard, Keyboard, session } = require("grammy");
const express = require("express");
const bodyParser = require("body-parser");
const crypto = require("crypto");
const stripe = require("stripe")(process.env.STRIPE_KEY); // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É
const fs = require("fs");
const axios = require("axios");
const connectDB = require("./database");
const Session = require("./sessionModel");

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new Bot(process.env.BOT_API_KEY); // –í–∞—à API –∫–ª—é—á –æ—Ç Telegram –±–æ—Ç–∞

// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
connectDB();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ JSON-—Ñ–∞–π–ª–∞
const loadMessages = () => {
  return JSON.parse(fs.readFileSync("messages.json", "utf8"));
};
const messages = loadMessages();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
function generateUniqueId() {
  const maxId = 2147483647; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  const minId = 1; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  return (Date.now() % (maxId - minId + 1)) + minId;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É
function generatePaymentLink(paymentId, sum, email) {
  const shopId = process.env.ROBO_ID; // –õ–æ–≥–∏–Ω –≤–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –≤ –†–æ–±–æ–∫–∞—Å—Å–µ
  const secretKey1 = process.env.ROBO_SECRET1; // Secret Key 1 –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏

  const signature = crypto
    .createHash("md5")
    .update(`${shopId}:${sum}:${paymentId}:${secretKey1}`)
    .digest("hex");

  return `https://auth.robokassa.ru/Merchant/Index.aspx?MerchantLogin=${shopId}&OutSum=${sum}&InvId=${paymentId}&SignatureValue=${signature}&Email=${encodeURIComponent(
    email
  )}&IsTest=0`; // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ https://auth.robokassa.ru/ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ Price
async function createStripePrice() {
  const price = await stripe.prices.create({
    unit_amount: 1000, // 10 –µ–≤—Ä–æ –≤ —Ü–µ–Ω—Ç–∞—Ö
    currency: "amd",
    product_data: {
      name: "Webinar Registration",
    },
  });
  return price.id;
}

async function generatePaymentLinkForStudio(studio, email) {
  const studioInfo = studioDetails[studio];

  if (!studioInfo) {
    throw new Error("–°—Ç—É–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
  }

  const paymentId = generateUniqueId(); // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
  const sum = studioInfo.price;
  const currency = studioInfo.currency;
  const e = email;

  if (studioInfo.paymentSystem === "robokassa") {
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è Robokassa
    const paymentLink = generatePaymentLink(paymentId, sum, e);
    return { paymentLink, paymentId };
  } else if (studioInfo.paymentSystem === "stripe") {
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è Stripe
    const priceId = await createStripePrice(studioInfo.price, currency, studio);
    const paymentLink = await createStripePaymentLink(priceId, paymentId);
    return { paymentLink, paymentId };
  } else {
    throw new Error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–ª–∞—Ç—ë–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞");
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–Ω—ã –≤ Stripe
async function createStripePrice(amount, currency, productName) {
  const price = await stripe.prices.create({
    unit_amount: amount * 100, // Stripe –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—É–º–º—É –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö (—Ü–µ–Ω—Ç–∞—Ö)
    currency: currency.toLowerCase(),
    product_data: {
      name: productName,
    },
  });
  return price.id;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ Stripe
async function createStripePaymentLink(priceId, paymentId) {
  const paymentLink = await stripe.paymentLinks.create({
    line_items: [
      {
        price: priceId,
        quantity: 1,
      },
    ],
    metadata: {
      paymentId: paymentId, // –ü–µ—Ä–µ–¥–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞
    },
  });
  return paymentLink.url;
}

const studioDetails = {
  "–°—Ç—É–¥–∏—è –Ω–∞ –º. 1905–≥.": {
    price: 1,
    currency: "RUB",
    tag: "01MSC_group_YCG_start",
    paymentSystem: "robokassa", // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Robokassa –¥–ª—è –†–æ—Å—Å–∏–∏
  },
  "–°—Ç—É–¥–∏—è –Ω–∞ –º. –ü–µ—Ç—Ä–æ–≥—Ä–∞–¥—Å–∫–∞—è": {
    price: 2,
    currency: "RUB",
    tag: "01SPB_group_RTC_start",
    paymentSystem: "robokassa", // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Robokassa –¥–ª—è –†–æ—Å—Å–∏–∏
  },
  "–°—Ç—É–¥–∏—è –Ω–∞ 950. –í—ã–±–æ—Ä–≥—Å–∫–∞—è": {
    price: 3,
    currency: "RUB",
    tag: "01SPB_group_HKC_start",
    paymentSystem: "robokassa",
  },
  "–°—Ç—É–¥–∏—è –Ω–∞ –º. –ú–æ—Å–∫–æ–≤—Å–∫–∏–µ –í–æ—Ä–æ—Ç–∞": {
    price: 4,
    currency: "RUB",
    tag: "01SPB_group_SPI_start",
    paymentSystem: "robokassa",
  },
  "–°—Ç—É–¥–∏—è –Ω–∞ –ë—É–∑–∞–Ω–¥–∞": {
    price: 100,
    currency: "AMD",
    tag: "01YRV_group_GFT_start",
    paymentSystem: "stripe", // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Stripe –¥–ª—è –ï—Ä–µ–≤–∞–Ω–∞
  },
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—É–¥–∏–∏
function getPriceAndSchedule(studio) {
  const priceSchedule = {
    "–°—Ç—É–¥–∏—è –Ω–∞ –º. 1905–≥.":
      "–ê–¥—Ä–µ—Å —Å—Ç—É–¥–∏–∏ –º. 1905–≥.: \n–º. –£–ª. –ë–æ–ª—å—à–∞—è –î–µ–∫–∞–±—Ä—å—Å–∫–∞—è, –¥.3 —Å25\n\nüîª –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π:\n–í—Ç–æ—Ä–Ω–∏–∫ 18:40 –∏ 20:00\n–ß–µ—Ç–≤–µ—Ä–≥ 18:40 –∏ 20:00\n–°—É–±–±–æ—Ç–∞ 12:00\n\nüîª –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:\nüëâüèª–ü—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ - 950‚ÇΩ\nüëâüèª–ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ 12 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (–¥–æ—Å—Ç—É–ø 6 –Ω–µ–¥–µ–ª—å) - 11 400‚ÇΩ\nüëâüèª1 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (–ø–æ-—Ä–∞–∑–æ–≤–æ) - 1 100‚ÇΩ\n\nüîª –¶–µ–Ω—ã –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:\n1 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (1 —á–µ–ª.) - 3 600‚ÇΩ –∑–∞ –∑–∞–Ω—è—Ç–∏–µ\n1 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (2 —á–µ–ª.) - 5 000‚ÇΩ –∑–∞ –∑–∞–Ω—è—Ç–∏–µ\n1 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (3 —á–µ–ª.) - 6 000‚ÇΩ –∑–∞ –∑–∞–Ω—è—Ç–∏–µ",
    "–°—Ç—É–¥–∏—è –Ω–∞ –º. –ü–µ—Ç—Ä–æ–≥—Ä–∞–¥—Å–∫–∞—è":
      "–ê–¥—Ä–µ—Å —Å—Ç—É–¥–∏–∏ –º. –ü–µ—Ç—Ä–æ–≥—Ä–∞–¥—Å–∫–∞—è.:\n  –£–ª. –ì–∞–∑–æ–≤–∞—è 10–ù\n\nüîª –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π:\n–í—Ç–æ—Ä–Ω–∏–∫ 20:00\n–ß–µ—Ç–≤–µ—Ä–≥ 20:00\n–°—É–±–±–æ—Ç–∞ 14:00\n\nüîª –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:\nüëâüèª –ü—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ - 950‚ÇΩ\nüëâüèª –ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ 12 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (–¥–æ—Å—Ç—É–ø 4 –Ω–µ–¥–µ–ª–∏) - 9 600‚ÇΩ\nüëâüèª –ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ 12 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (–¥–æ—Å—Ç—É–ø 6 –Ω–µ–¥–µ–ª–∏) - 11 400‚ÇΩ\n1 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (–ø–æ-—Ä–∞–∑–æ–≤–æ) - 1 100‚ÇΩ\n\nüîª –¶–µ–Ω—ã –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:\n1 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (1 —á–µ–ª.) - 3 600‚ÇΩ –∑–∞ –∑–∞–Ω—è—Ç–∏–µ\n1 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (2 —á–µ–ª.) - 5 000‚ÇΩ –∑–∞ –∑–∞–Ω—è—Ç–∏–µ\n1 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (3 —á–µ–ª.) - 6 000‚ÇΩ –∑–∞ –∑–∞–Ω—è—Ç–∏–µ",
    "–°—Ç—É–¥–∏—è –Ω–∞ –º. –í—ã–±–æ—Ä–≥—Å–∫–∞—è":
      "–ê–¥—Ä–µ—Å —Å—Ç—É–¥–∏–∏ –º. –í—ã–±–æ—Ä–≥—Å–∫–∞—è.:\n  –ú–∞–ª—ã–π –°–∞–º–ø—Å–æ–Ω–∏–µ–≤—Å–∫–∏–π –ø—Ä., –¥–æ–º 2\n\nüîª –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π:\n–í—Ç–æ—Ä–Ω–∏–∫ 20:30\n–ß–µ—Ç–≤–µ—Ä–≥ 20:30\n–°—É–±–±–æ—Ç–∞ 14:00\n\nüîª –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:\nüëâüèª –ü—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ - 950‚ÇΩ\nüëâüèª –ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ 12 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (–¥–æ—Å—Ç—É–ø 4 –Ω–µ–¥–µ–ª–∏) - 9 600‚ÇΩ\nüëâüèª –ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ 12 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (–¥–æ—Å—Ç—É–ø 6 –Ω–µ–¥–µ–ª—å) - 11 400‚ÇΩ\n1 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (–ø–æ-—Ä–∞–∑–æ–≤–æ) - 1 100‚ÇΩ\n\nüîª –¶–µ–Ω—ã –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:\n1 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (1 —á–µ–ª.) - 3 600‚ÇΩ –∑–∞ –∑–∞–Ω—è—Ç–∏–µ\n1 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (2 —á–µ–ª.) - 5 000‚ÇΩ –∑–∞ –∑–∞–Ω—è—Ç–∏–µ\n1 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (3 —á–µ–ª.) - 6 000‚ÇΩ –∑–∞ –∑–∞–Ω—è—Ç–∏–µ",
    "–°—Ç—É–¥–∏—è –Ω–∞ –º. –ú–æ—Å–∫–æ–≤—Å–∫–∏–µ –í–æ—Ä–æ—Ç–∞":
      "–ê–¥—Ä–µ—Å —Å—Ç—É–¥–∏–∏ –º. –í—ã–±–æ—Ä–≥—Å–∫–∞—è.:\n  –£–ª. –ó–∞—Å—Ç–∞–≤—Å–∫–∞—è, 33–ü\n\nüîª –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π:\n–í—Ç–æ—Ä–Ω–∏–∫ 20:40\n–ß–µ—Ç–≤–µ—Ä–≥ 20:40\n–°—É–±–±–æ—Ç–∞ 14:00\n\nüîª –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:\nüëâüèª –ü—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ - 950‚ÇΩ\nüëâüèª –ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ 12 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (–¥–æ—Å—Ç—É–ø 4 –Ω–µ–¥–µ–ª–∏) - 9 600‚ÇΩ\nüëâüèª –ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ 12 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (–¥–æ—Å—Ç—É–ø 6 –Ω–µ–¥–µ–ª—å) - 11 400‚ÇΩ\n1 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (–ø–æ-—Ä–∞–∑–æ–≤–æ) - 1 100‚ÇΩ\n\nüîª –¶–µ–Ω—ã –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:\n1 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (1 —á–µ–ª.) - 3 600‚ÇΩ –∑–∞ –∑–∞–Ω—è—Ç–∏–µ\n1 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (2 —á–µ–ª.) - 5 000‚ÇΩ –∑–∞ –∑–∞–Ω—è—Ç–∏–µ\n1 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (3 —á–µ–ª.) - 6 000‚ÇΩ –∑–∞ –∑–∞–Ω—è—Ç–∏–µ",
    "–°—Ç—É–¥–∏—è –Ω–∞ –ë—É–∑–∞–Ω–¥–∞":
      "–ê–¥—Ä–µ—Å —Å—Ç—É–¥–∏–∏ –Ω–∞ —É–ª. –ë—É–∑–∞–Ω–¥–∞.:\n –£–ª. –ü–∞–≤—Å—Ç–æ—Å–∞ –ë—É–∑–∞–Ω–¥–∞, 1/3\n\nüîª –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π:\n–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 08:30 (—É—Ç—Ä–æ) \n–°—Ä–µ–¥–∞ 08:30 (—É—Ç—Ä–æ) \n–ü—è—Ç–Ω–∏—Ü–∞ 08:30 (—É—Ç—Ä–æ) \n\nüîª –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:\nüëâüèª –ü—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ - 5000 AMD\nüëâüèª –ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ 12 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (–¥–æ—Å—Ç—É–ø 6 –Ω–µ–¥–µ–ª—å) - 60 000 AMD\n1 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (–ø–æ-—Ä–∞–∑–æ–≤–æ) - 7 000 AMD\n\nüîª –¶–µ–Ω—ã –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:\n1 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (1 —á–µ–ª.) - 12 500 AMD –∑–∞ –∑–∞–Ω—è—Ç–∏–µ\n1 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (2 —á–µ–ª.) - 17 000 AMD –∑–∞ –∑–∞–Ω—è—Ç–∏–µ\n1 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (3 —á–µ–ª.) - 21 000 AMD –∑–∞ –∑–∞–Ω—è—Ç–∏–µ",
  };

  return (
    priceSchedule[studio] || "–¶–µ–Ω–∞ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã."
  );
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –≤–µ–±—Ö—É–∫
async function sendToWebhook(studio, telegramId) {
  const webhookUrl =
    "https://hook.eu1.make.com/dg644dcxuiuxrj57lugpl4dkuwv4pyvw"; // –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à URL –≤–µ–±—Ö—É–∫–∞

  // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
  const data = [
    {
      messenger: "telegram",
      variables: [
        {
          name: "studio",
          type: "text",
          value: studio, // –ü–µ—Ä–µ–¥–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—É–¥–∏—é
        },
      ],
      telegram_id: telegramId, // –ü–µ—Ä–µ–¥–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    },
  ];

  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–µ–±—Ö—É–∫ Make.com
    await axios.post(webhookUrl, data);
    console.log("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤–µ–±—Ö—É–∫");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ –≤–µ–±—Ö—É–∫:", error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Airtable
async function sendFirstAirtable(tgId, name, nickname) {
  const apiKey = process.env.AIRTABLE_API_KEY;
  const baseId = process.env.AIRTABLE_BASE_ID;
  const idId = process.env.AIRTABLE_IDS_ID;

  const url = `https://api.airtable.com/v0/${baseId}/${idId}`;
  const headers = {
    Authorization: `Bearer ${apiKey}`,
    "Content-Type": "application/json",
  };

  const data = {
    fields: {
      tgId: tgId,
      FIO: name,
      Nickname: nickname,
    },
  };

  try {
    const response = await axios.post(url, data, { headers });
    return response.data.id; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏
    // await axios.post(url, data, { headers });
  } catch (error) {
    console.error(
      "Error sending data to Airtable:",
      error.response ? error.response.data : error.message
    );
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ Airtable
async function updateAirtableRecord(id, city, studio) {
  const apiKey = process.env.AIRTABLE_API_KEY;
  const baseId = process.env.AIRTABLE_BASE_ID;
  const tableId = process.env.AIRTABLE_IDS_ID;

  const url = `https://api.airtable.com/v0/${baseId}/${tableId}/${id}`;
  const headers = {
    Authorization: `Bearer ${apiKey}`,
    "Content-Type": "application/json",
  };

  const data = {
    fields: {
      City: city,
      Studio: studio,
    },
  };

  try {
    await axios.patch(url, data, { headers }); // –ò—Å–ø–æ–ª—å–∑—É–µ–º PATCH –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  } catch (error) {
    console.error(
      "Error updating data in Airtable:",
      error.response ? error.response.data : error.message
    );
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Airtable
async function sendToAirtable(name, email, phone, tgId, city, studio) {
  const apiKey = process.env.AIRTABLE_API_KEY;
  const baseId = process.env.AIRTABLE_BASE_ID;
  const tableId = process.env.AIRTABLE_LEADS_ID;

  const url = `https://api.airtable.com/v0/${baseId}/${tableId}`;
  const headers = {
    Authorization: `Bearer ${apiKey}`,
    "Content-Type": "application/json",
  };

  const data = {
    fields: {
      FIO: name,
      email: email,
      Phone: phone,
      tgId: tgId,
      City: city,
      Studio: studio,
    },
  };

  try {
    await axios.post(url, data, { headers });
  } catch (error) {
    console.error(
      "Error sending data to Airtable:",
      error.response ? error.response.data : error.message
    );
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Airtable 2
async function sendTwoToAirtable(tgId, invId, sum, lessons, tag, date, nick) {
  const apiKey = process.env.AIRTABLE_API_KEY;
  const baseId = process.env.AIRTABLE_BASE_ID;
  const buyId = process.env.AIRTABLE_BUY_ID;

  const url = `https://api.airtable.com/v0/${baseId}/${buyId}`;
  const headers = {
    Authorization: `Bearer ${apiKey}`,
    "Content-Type": "application/json",
  };

  const data = {
    fields: {
      tgId: tgId,
      inv_id: invId,
      Sum: sum,
      Lessons: lessons,
      Tag: tag,
      Date: date,
      Nickname: nick,
    },
  };

  try {
    await axios.post(url, data, { headers });
  } catch (error) {
    console.error(
      "Error sending data to Airtable:",
      error.response ? error.response.data : error.message
    );
  }
}

// –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Express-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
const app = express();
app.use(bodyParser.json()); // –ò—Å–ø–æ–ª—å–∑—É–µ–º JSON –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram –∏ –†–æ–±–æ–∫–∞—Å—Å—ã

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
bot.command("start", async (ctx) => {
  try {
    await Session.findOneAndUpdate(
      { userId: ctx.from.id.toString() },
      { userId: ctx.from.id.toString(), step: "start" },
      { upsert: true }
    );

    const fullName = `${ctx.from.first_name} ${
      ctx.from.last_name || ""
    }`.trim();

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏ –≤ —Å–µ—Å—Å–∏–∏
    const airtableId = await sendFirstAirtable(
      ctx.from.id,
      fullName,
      ctx.from.username
    );
    const session = await Session.findOne({ userId: ctx.from.id.toString() });
    session.airtableId = airtableId; // –°–æ—Ö—Ä–∞–Ω—è–µ–º airtableId –≤ —Å–µ—Å—Å–∏–∏
    await session.save();

    // await sendFirstAirtable(ctx.from.id, fullName, ctx.from.username);

    await ctx.reply(
      "–ü—Ä–∏–≤–µ—Ç! –ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–æ–π –≥–æ—Ä–æ–¥ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
      {
        reply_markup: new InlineKeyboard()
          .add({ text: "–ú–æ—Å–∫–≤–∞", callback_data: "city_moscow" })
          .row()
          .add({ text: "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", callback_data: "city_spb" })
          .row()
          .add({ text: "–ï—Ä–µ–≤–∞–Ω", callback_data: "city_yerevan" }),
      }
    );
  } catch (error) {
    console.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", error);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
bot.on("callback_query:data", async (ctx) => {
  const action = ctx.callbackQuery.data;
  const session = await Session.findOne({ userId: ctx.from.id.toString() });

  if (
    action === "city_moscow" ||
    action === "city_spb" ||
    action === "city_yerevan"
  ) {
    let city;
    let studiosKeyboard;
    if (action === "city_moscow") {
      city = "–ú–æ—Å–∫–≤–∞";
      // –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å—Ç—É–¥–∏–π –≤ –ú–æ—Å–∫–≤–µ
      studiosKeyboard = new InlineKeyboard().add({
        text: "–°—Ç—É–¥–∏—è –Ω–∞ –º. 1905–≥.",
        callback_data: "studio_ycg",
      });
    } else if (action === "city_spb") {
      city = "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥";
      // –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å—Ç—É–¥–∏–π –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ
      studiosKeyboard = new InlineKeyboard()
        .add({ text: "–°—Ç—É–¥–∏—è –Ω–∞ –º. –ü–µ—Ç—Ä–æ–≥—Ä–∞–¥–∫–∞—è", callback_data: "studio_rtc" })
        .row()
        .add({ text: "–°—Ç—É–¥–∏—è –Ω–∞ –º. –í—ã–±–æ—Ä–≥—Å–∫–∞—è", callback_data: "studio_hkc" })
        .row()
        .add({
          text: "–°—Ç—É–¥–∏—è –Ω–∞ –º. –ú–æ—Å–∫–æ–≤—Å–∫–∏–µ –í–æ—Ä–æ—Ç–∞",
          callback_data: "studio_spi",
        });
    } else if (action === "city_yerevan") {
      city = "–ï—Ä–µ–≤–∞–Ω";
      // –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å—Ç—É–¥–∏–π –≤ –ï—Ä–µ–≤–∞–Ω–µ
      studiosKeyboard = new InlineKeyboard().add({
        text: "–°—Ç—É–¥–∏—è –Ω–∞ –ë—É–∑–∞–Ω–¥–∞",
        callback_data: "studio_gof",
      });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –≤ —Å–µ—Å—Å–∏–∏
    session.city = city;
    await session.save();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç—É–¥–∏–∏
    await ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ç—É–¥–∏—é:`, {
      reply_markup: studiosKeyboard,
    });
  }
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å—Ç—É–¥–∏–∏
  else if (action.startsWith("studio_")) {
    let studio;
    if (action === "studio_ycg") {
      studio = "–°—Ç—É–¥–∏—è –Ω–∞ –º. 1905–≥.";
    } else if (action === "studio_rtc") {
      studio = "–°—Ç—É–¥–∏—è –Ω–∞ –º. –ü–µ—Ç—Ä–æ–≥—Ä–∞–¥—Å–∫–∞—è";
    } else if (action === "studio_hkc") {
      studio = "–°—Ç—É–¥–∏—è –Ω–∞ –º. –í—ã–±–æ—Ä–≥—Å–∫–∞—è";
    } else if (action === "studio_spi") {
      studio = "–°—Ç—É–¥–∏—è –Ω–∞ –º. –ú–æ—Å–∫–æ–≤—Å–∫–∏–µ –í–æ—Ä–æ—Ç–∞";
    } else if (action === "studio_gof") {
      studio = "–°—Ç—É–¥–∏—è –Ω–∞ –ë—É–∑–∞–Ω–¥–∞";
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—É–¥–∏—é –≤ —Å–µ—Å—Å–∏–∏
    session.studio = studio;
    await session.save();

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ Airtable
    await updateAirtableRecord(session.airtableId, session.city, studio);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç—É–¥–∏–∏
    await ctx.reply(
      "–ù–∞—à–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ–º–æ–≥—É—Ç –≤–∞–º:\n‚ñ´Ô∏è–°—Ç–∞—Ç—å —Å–∏–ª—å–Ω–µ–µ\n‚ñ´Ô∏è–ü–æ–≤—ã—Å–∏—Ç—å —Ç–æ–Ω—É—Å\n‚ñ´Ô∏è–ù–∞—É—á–∏—Ç—å—Å—è –≤–ª–∞–¥–µ—Ç—å —Ç–µ–ª–æ–º\n‚ñ´Ô∏è–ù–∞–π—Ç–∏ –¥—Ä—É–∑–µ–π –∏ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤\n\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∏–∂–Ω–∏–º –º–µ–Ω—é, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É.",
      {
        reply_markup: new Keyboard()
          .text("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
          .row()
          .text("–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥—è—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
          .text("–¶–µ–Ω—ã –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
          .row()
          .text("–ù–∞–∑–∞–¥")
          .text("FAQ")
          .resized(), // –¥–µ–ª–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–æ–º–ø–∞–∫—Ç–Ω–æ–π
      }
    );
  }
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "–ü–æ–º–µ–Ω—è—Ç—å –≥–æ—Ä–æ–¥"
  else if (action === "change_city") {
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", {
      reply_markup: new InlineKeyboard()
        .add({ text: "–ú–æ—Å–∫–≤–∞", callback_data: "city_moscow" })
        .row()
        .add({ text: "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", callback_data: "city_spb" })
        .row()
        .add({ text: "–ï—Ä–µ–≤–∞–Ω", callback_data: "city_yerevan" }),
    });
  } else if (action === "edit_info") {
    await ctx.reply(messages.editChoice, {
      reply_markup: new InlineKeyboard()
        .add({ text: "–§–ò", callback_data: "edit_name" })
        .add({ text: "–¢–µ–ª–µ—Ñ–æ–Ω", callback_data: "edit_phone" })
        .add({ text: "E-mail", callback_data: "edit_email" }),
    });
    session.step = "awaiting_edit";
    await session.save(); // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —à–∞–≥–∞
  } else if (action.startsWith("edit_")) {
    session.step = `awaiting_edit_${action.replace("edit_", "")}`;
    await ctx.reply(
      messages[
        `enter${
          action.replace("edit_", "").charAt(0).toUpperCase() +
          action.replace("edit_", "").slice(1)
        }`
      ]
    );
    await session.save(); // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —à–∞–≥–∞
  } else if (session.step === "awaiting_confirmation") {
    if (action === "confirm_payment") {
      await ctx.reply("–°–ø–∞—Å–∏–±–æ! –ù–∞ –∫–∞–∫—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?", {
        reply_markup: new InlineKeyboard()
          .add({ text: "–ì—Ä—É–ø–ø–æ–≤—É—é", callback_data: "group_training" })
          .row()
          .add({
            text: "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é (–∏–ª–∏ —Å–ø–ª–∏—Ç)",
            callback_data: "personal_training",
          }),
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Airtable
      await sendToAirtable(
        session.name, // –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session.email, // Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session.phone, // –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        ctx.from.id, // Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session.city, // –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session.studio // –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      );

      session.step = "awaiting_training_type";
      await session.save(); // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —à–∞–≥–∞
    }
  } else if (session.step === "awaiting_training_type") {
    if (action === "group_training") {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–∏–∏ –∏–∑ —Å–µ—Å—Å–∏–∏ –∏ telegram_id
      const studio = session.studio; // –ë–µ—Ä–µ–º —Å—Ç—É–¥–∏—é –∏–∑ —Å–µ—Å—Å–∏–∏
      const telegramId = ctx.from.id; // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≤–µ–±—Ö—É–∫
      await sendToWebhook(studio, telegramId);

      // –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await ctx.reply("–ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ");

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–≥, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      session.step = "awaiting_next_step";
      await session.save();
    } else if (action === "personal_training") {
      // –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
      await ctx.reply(
        "–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
      );

      session.step = "completed";
      await session.save();
    }
  } else if (action.startsWith("day")) {
    const buttonText = action.split(",")[1];
    const date = buttonText.match(/\(([^)]+)\)/);
    const str = JSON.stringify(date[1]);
    console.log(str);

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ paymentId
    const { paymentLink, paymentId } = await generatePaymentLinkForStudio(
      session.studio,
      session.email
    );

    await ctx.reply(
      `–û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏: ${buttonText}\n–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –æ–ø–ª–∞—Ç–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ.\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∑–∞–ø–∏—Å–∏.`
    );
    await ctx.reply(`–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã: ${paymentLink}`);
    session.step = "completed";
    await session.save();
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Airtable
    const sum = studioDetails[session.studio].price;
    const lessons = 1;
    const tag = studioDetails[session.studio].tag; // –ë–µ—Ä–µ–º —Ç–µ–≥ –∏–∑ —Å—Ç—É–¥–∏–∏
    await sendTwoToAirtable(
      ctx.from.id,
      paymentId,
      sum,
      lessons,
      tag,
      str,
      ctx.from.username
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∂–∞—Ç–∏–π –æ–±—ã—á–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
bot.on("message:text", async (ctx) => {
  const session = await Session.findOne({ userId: ctx.from.id.toString() });
  const userMessage = ctx.message.text;

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Å—Ç—É–¥–∏–π
  if (userMessage === "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É") {
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ–µ –º–µ–Ω—é
    await ctx.reply("–ú–µ–Ω—é —Å–∫—Ä—ã—Ç–æ, –≥–æ—Ç–æ–≤–∏–º –≤–∞—Å –∫ –∑–∞–ø–∏—Å–∏..", {
      reply_markup: {
        remove_keyboard: true, // –£–¥–∞–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ–µ –º–µ–Ω—é
      },
    });

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç—Ç–∞–ø –≤ —Å–µ—Å—Å–∏–∏
    session.step = "awaiting_name";
    await session.save(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏

    // –ó–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤–≤–æ–¥ –§–ò–û
    setTimeout(async () => {
      await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:");
    }, 1000); // 1000 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ = 1 —Å–µ–∫—É–Ω–¥–∞
  } else if (userMessage === "–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥—è—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏") {
    await ctx.reply(
      "–£ –Ω–∞—Å –Ω–µ –æ–±—ã—á–Ω—ã–µ –≥—Ä—É–ø–ø–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –≥–¥–µ –≤—Å–µ —É—á–µ–Ω–∏–∫–∏ –¥–µ–ª–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è ‚Äî —É –Ω–∞—Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥.\n\n–ù–∞ –ø–µ—Ä–≤–æ–º –∑–∞–Ω—è—Ç–∏–∏ —Ç—Ä–µ–Ω–µ—Ä –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –≤–∞—à —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∏ –æ–±—Å—É–¥–∏—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ü–µ–ª–∏. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –±—É–¥—É—Ç –Ω–∞–ø–∏—Å–∞–Ω—ã —Å —É—á–µ—Ç–æ–º –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è –∏ —Ü–µ–ª–µ–π üî•\n\n–ú—ã —ç—Ç–æ –¥–µ–ª–∞–µ–º —Å –ø–æ–º–æ—â—å—é –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –≥–¥–µ —É –≤–∞—Å –±—É–¥–µ—Ç —Å–≤–æ–π –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç, –∏—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã‚ùóÔ∏è\n\n–¢–∞–∫ –º—ã –¥–æ–±–∏–≤–∞–µ–º—Å—è –Ω–∞–∏–±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –¥–ª—è –Ω–∞—à–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤ ü§ç"
    );
  } else if (userMessage === "–¶–µ–Ω—ã –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ") {
    const priceAndSchedule = getPriceAndSchedule(session.studio);
    await ctx.reply(priceAndSchedule);
  } else if (userMessage === "–ù–∞–∑–∞–¥") {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—É–¥–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≥–æ—Ä–æ–¥–∞
    let studiosKeyboard;

    if (session.city === "–ú–æ—Å–∫–≤–∞") {
      studiosKeyboard = new InlineKeyboard()
        .add({ text: "–°—Ç—É–¥–∏—è –Ω–∞ –º. 1905–≥.", callback_data: "studio_ycg" })
        .row()
        .add({ text: "–ü–æ–º–µ–Ω—è—Ç—å –≥–æ—Ä–æ–¥", callback_data: "change_city" });
    } else if (session.city === "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥") {
      studiosKeyboard = new InlineKeyboard()
        .add({ text: "–°—Ç—É–¥–∏—è –Ω–∞ –º. –ü–µ—Ç—Ä–æ–≥—Ä–∞–¥–∫–∞—è", callback_data: "studio_rtc" })
        .row()
        .add({ text: "–°—Ç—É–¥–∏—è –Ω–∞ –º. –í—ã–±–æ—Ä–≥—Å–∫–∞—è", callback_data: "studio_hkc" })
        .row()
        .add({
          text: "–°—Ç—É–¥–∏—è –Ω–∞ –º. –ú–æ—Å–∫–æ–≤—Å–∫–∏–µ –í–æ—Ä–æ—Ç–∞",
          callback_data: "studio_spi",
        })
        .row()
        .add({ text: "–ü–æ–º–µ–Ω—è—Ç—å –≥–æ—Ä–æ–¥", callback_data: "change_city" });
    } else if (session.city === "–ï—Ä–µ–≤–∞–Ω") {
      studiosKeyboard = new InlineKeyboard()
        .add({ text: "–°—Ç—É–¥–∏—è –Ω–∞ –ë—É–∑–∞–Ω–¥–∞", callback_data: "studio_gof" })
        .row()
        .add({ text: "–ü–æ–º–µ–Ω—è—Ç—å –≥–æ—Ä–æ–¥", callback_data: "change_city" });
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç—É–¥–∏–∏
    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—É–¥–∏—é –∏–ª–∏ –ø–æ–º–µ–Ω—è–π—Ç–µ –≥–æ—Ä–æ–¥:", {
      reply_markup: studiosKeyboard,
    });
  } else if (userMessage === "FAQ") {
    await ctx.reply(
      "–ü–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ –≤—ã –Ω–∞–π–¥–µ—Ç–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –Ω–∞—à–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö. \n\n–ö–æ–º—É –ø–æ–¥—Ö–æ–¥—è—Ç —Ç–∞–∫–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è, —Å–∫–æ–ª—å–∫–æ –¥–ª—è—Ç—Å—è –∑–∞–Ω—è—Ç–∏—è, –∫–∞–∫ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏ –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã. \n\n–ï—Å–ª–∏ –≤—ã –Ω–µ –Ω–∞—à–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∑–∞–¥–∞–π—Ç–µ –µ–≥–æ –±–æ—Ç—É, –Ω–∞–ø–∏—Å–∞–≤ –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ ‚ÜòÔ∏è",
      {
        reply_markup: new InlineKeyboard().url(
          "–ß–∏—Ç–∞—Ç—å FAQ",
          "https://telegra.ph/I-Do-Calisthenics-FAQ-02-06"
        ),
      }
    );
  } else if (session.step === "awaiting_name") {
    session.name = ctx.message.text;
    await ctx.reply(messages.enterPhone);
    session.step = "awaiting_phone";
    await session.save(); // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —à–∞–≥–∞
  } else if (session.step === "awaiting_phone") {
    const phone = ctx.message.text;
    if (/^\+\d+$/.test(phone)) {
      session.phone = phone;
      await ctx.reply(messages.enterEmail);
      session.step = "awaiting_email";
      await session.save(); // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —à–∞–≥–∞
    } else {
      await ctx.reply(messages.invalidPhone);
    }
  } else if (session.step === "awaiting_email") {
    session.email = ctx.message.text;
    const confirmationMessage = messages.confirmation
      .replace("{{ $–§–ò }}", session.name)
      .replace("{{ $Tel }}", session.phone)
      .replace("{{ $email }}", session.email);

    await ctx.reply(confirmationMessage, {
      reply_markup: new InlineKeyboard()
        .add({ text: "–í—Å–µ –≤–µ—Ä–Ω–æ", callback_data: "confirm_payment" })
        .row()
        .add({ text: "–ò–∑–º–µ–Ω–∏—Ç—å", callback_data: "edit_info" }),
    });

    session.step = "awaiting_confirmation";
    await session.save(); // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —à–∞–≥–∞
  } else if (session.step.startsWith("awaiting_edit_")) {
    const field = session.step.replace("awaiting_edit_", "");
    if (field === "name") {
      session.name = ctx.message.text;
    } else if (field === "phone") {
      const phone = ctx.message.text;
      if (/^\+\d+$/.test(phone)) {
        session.phone = phone;
      } else {
        await ctx.reply(messages.invalidPhone);
        return;
      }
    } else if (field === "email") {
      session.email = ctx.message.text;
    }

    const confirmationMessage = messages.confirmation
      .replace("{{ $–§–ò }}", session.name)
      .replace("{{ $Tel }}", session.phone)
      .replace("{{ $email }}", session.email);

    await ctx.reply(confirmationMessage, {
      reply_markup: new InlineKeyboard()
        .add({ text: "–í—Å–µ –≤–µ—Ä–Ω–æ", callback_data: "confirm_payment" })
        .row()
        .add({ text: "–ò–∑–º–µ–Ω–∏—Ç—å", callback_data: "edit_info" }),
    });

    session.step = "awaiting_confirmation";
    await session.save(); // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —à–∞–≥–∞
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /operator
bot.command("operator", async (ctx) => {
  try {
    await ctx.reply(
      "–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É –ù–∏–∫–∏—Ç–µ: @IDC_Manager, –æ–Ω –ø–æ–¥—Å–∫–∞–∂–µ—Ç üòâ"
    );
  } catch (error) {
    console.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", error);
  }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.start();
