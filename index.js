require("dotenv").config();
const { Bot, InlineKeyboard } = require("grammy");
const fs = require("fs");
const crypto = require("crypto");
const axios = require("axios");
const stripe = require("stripe")(process.env.STRIPE_KEY);
const connectDB = require("./database");
const Session = require("./sessionModel");

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new Bot(process.env.BOT_API_KEY);

// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
connectDB();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ JSON-—Ñ–∞–π–ª–∞
const loadMessages = () => {
  return JSON.parse(fs.readFileSync("messages.json", "utf8"));
};
const messages = loadMessages();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
function generateUniqueId() {
  const maxId = 2147483647;
  const minId = 1;
  return (Date.now() % (maxId - minId + 1)) + minId;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ Price
async function createPrice() {
  const price = await stripe.prices.create({
    unit_amount: 900, // 9 –µ–≤—Ä–æ –≤ —Ü–µ–Ω—Ç–∞—Ö
    currency: "eur",
    product_data: {
      name: "Webinar Registration",
    },
  });
  return price.id;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É
async function createPaymentLink(priceId, email) {
  const paymentLink = await stripe.paymentLinks.create({
    line_items: [
      {
        price: priceId,
        quantity: 1,
      },
    ],
    customer_email: email,
  });
  return paymentLink.url;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ –†–æ–±–æ–∫–∞—Å—Å—É
function generatePaymentLinkRobokassa(paymentId, amount, email) {
  const shopId = process.env.ROBO_ID;
  const secretKey1 = process.env.ROBO_SECRET1;

  const signature = crypto
    .createHash("md5")
    .update(`${shopId}:${amount}:${paymentId}:${secretKey1}`)
    .digest("hex");

  return `https://auth.robokassa.ru/Merchant/Index.aspx?MerchantLogin=${shopId}&OutSum=${amount}&InvId=${paymentId}&SignatureValue=${signature}&Email=${encodeURIComponent(
    email
  )}&IsTest=0`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Airtable
async function sendToAirtable(name, email, phone, tgId, invId) {
  const apiKey = process.env.AIRTABLE_API_KEY;
  const baseId = process.env.AIRTABLE_BASE_ID;
  const tableId = process.env.AIRTABLE_TABLE_ID;

  const url = `https://api.airtable.com/v0/${baseId}/${tableId}`;
  const headers = {
    Authorization: `Bearer ${apiKey}`,
    "Content-Type": "application/json",
  };

  const data = {
    fields: {
      FIO: name,
      email: email,
      Phone: phone,
      tgId: tgId,
      Tag: "Webinar",
      inv_id: invId,
    },
  };

  try {
    await axios.post(url, data, { headers });
  } catch (error) {
    console.error(
      "Error sending data to Airtable:",
      error.response ? error.response.data : error.message
    );
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
bot.command("start", async (ctx) => {
  await Session.findOneAndUpdate(
    { userId: ctx.from.id.toString() },
    { userId: ctx.from.id.toString(), step: "start" },
    { upsert: true }
  );

  ctx.reply(messages.start, {
    reply_markup: new InlineKeyboard()
      .add({ text: "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä", callback_data: "register" })
      .row()
      .add({ text: "–£–∑–Ω–∞—Ç—å, —á—Ç–æ –±—É–¥–µ—Ç –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä–µ", callback_data: "info" })
      .row()
      .add({ text: "–û–ø–µ—Ä–∞—Ç–æ—Ä—ã", callback_data: "operator" }), // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /operator
bot.command("operator", async (ctx) => {
  await ctx.reply(
    "–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É –ù–∏–∫–∏—Ç–µ: @IDC_Manager, –æ–Ω –ø–æ–¥—Å–∫–∞–∂–µ—Ç üòâ"
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback_query, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
bot.on("callback_query:data", async (ctx) => {
  const action = ctx.callbackQuery.data;
  const session = await Session.findOne({ userId: ctx.from.id.toString() });

  if (action === "register") {
    await ctx.reply(messages.enterName);
    session.step = "awaiting_name";
    await session.save();
  } else if (action === "info") {
    await ctx.reply(messages.webinarInfo, {
      reply_markup: new InlineKeyboard().add({
        text: "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä",
        callback_data: "register_from_info",
      }),
    });
  } else if (action === "register_from_info") {
    await ctx.reply(messages.enterName);
    session.step = "awaiting_name";
    await session.save();
  } else if (action === "edit_info") {
    await ctx.reply(messages.editChoice, {
      reply_markup: new InlineKeyboard()
        .add({ text: "–§–ò", callback_data: "edit_name" })
        .add({ text: "–¢–µ–ª–µ—Ñ–æ–Ω", callback_data: "edit_phone" })
        .add({ text: "E-mail", callback_data: "edit_email" }),
    });
    session.step = "awaiting_edit";
    await session.save();
  } else if (action === "confirm_payment") {
    if (session.step === "awaiting_confirmation") {
      await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞—Ä—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:", {
        reply_markup: new InlineKeyboard()
          .add({ text: "–†–æ—Å—Å–∏–π—Å–∫–∞—è (‚ÇΩ)", callback_data: "rubles" })
          .add({ text: "–ó–∞—Ä—É–±–µ–∂–Ω–∞—è (‚Ç¨)", callback_data: "euros" }),
      });
      session.step = "awaiting_payment_type";
      await session.save();
    }
  } else if (action === "rubles" || action === "euros") {
    const paymentId = generateUniqueId();
    session.paymentId = paymentId;
    await session.save();

    if (action === "rubles") {
      const paymentLink = generatePaymentLinkRobokassa(
        paymentId,
        3,
        session.email
      );
      await ctx.reply(
        `–û—Ç–ø—Ä–∞–≤–ª—è—é —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤ —Ä—É–±–ª—è—Ö. –ü—Ä–æ–π–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ —Å—Å—ã–ª–∫–µ: ${paymentLink}`
      );
    } else if (action === "euros") {
      try {
        const priceId = await createPrice();
        const paymentLink = await createPaymentLink(priceId, session.email);
        await ctx.reply(
          `–û—Ç–ø—Ä–∞–≤–ª—è—é —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤ –µ–≤—Ä–æ. –ü—Ä–æ–π–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ —Å—Å—ã–ª–∫–µ: ${paymentLink}`
        );
      } catch (error) {
        console.error("Stripe error:", error);
        await ctx.reply(
          "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ."
        );
      }
    }

    await sendToAirtable(
      session.name,
      session.email,
      session.phone,
      ctx.from.id,
      paymentId
    );

    session.step = "completed";
    await session.save();
  } else if (action.startsWith("edit_")) {
    session.step = `awaiting_edit_${action.replace("edit_", "")}`;
    await ctx.reply(
      messages[
        `edit${
          action.replace("edit_", "").charAt(0).toUpperCase() +
          action.replace("edit_", "").slice(1)
        }`
      ]
    );
    await session.save();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
bot.on("message:text", async (ctx) => {
  const session = await Session.findOne({ userId: ctx.from.id.toString() });

  if (session.step === "awaiting_name") {
    session.name = ctx.message.text;
    await ctx.reply(messages.enterPhone);
    session.step = "awaiting_phone";
    await session.save();
  } else if (session.step === "awaiting_phone") {
    const phone = ctx.message.text;
    if (/^\+\d+$/.test(phone)) {
      session.phone = phone;
      await ctx.reply(messages.enterEmail);
      session.step = "awaiting_email";
      await session.save();
    } else {
      await ctx.reply(messages.invalidPhone);
    }
  } else if (session.step === "awaiting_email") {
    const email = ctx.message.text;
    if (/\S+@\S+\.\S+/.test(email)) {
      session.email = email;
      const confirmationMessage = messages.confirmation
        .replace("{{ $–§–ò }}", session.name)
        .replace("{{ $Tel }}", session.phone)
        .replace("{{ $email }}", session.email);

      await ctx.reply(confirmationMessage, {
        reply_markup: new InlineKeyboard()
          .add({ text: "–í—Å–µ –≤–µ—Ä–Ω–æ", callback_data: "confirm_payment" })
          .row()
          .add({ text: "–ò–∑–º–µ–Ω–∏—Ç—å", callback_data: "edit_info" }),
      });

      session.step = "awaiting_confirmation";
      await session.save();
    } else {
      await ctx.reply(messages.invalidEmail);
    }
  } else if (session.step === "awaiting_confirmation") {
    if (ctx.message.text === "–í—Å–µ –≤–µ—Ä–Ω–æ") {
      await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞—Ä—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:", {
        reply_markup: new InlineKeyboard()
          .add({ text: "–†–æ—Å—Å–∏–π—Å–∫–∞—è (‚ÇΩ)", callback_data: "rubles" })
          .add({ text: "–ó–∞—Ä—É–±–µ–∂–Ω–∞—è (‚Ç¨)", callback_data: "euros" }),
      });
      session.step = "awaiting_payment_type";
      await session.save();
    }
  } else if (session.step.startsWith("awaiting_edit_")) {
    const field = session.step.replace("awaiting_edit_", "");
    if (field === "name") {
      session.name = ctx.message.text;
    } else if (field === "phone") {
      const phone = ctx.message.text;
      if (/^\+\d+$/.test(phone)) {
        session.phone = phone;
      } else {
        await ctx.reply(messages.invalidPhone);
        return;
      }
    } else if (field === "email") {
      session.email = ctx.message.text;
    }

    const confirmationMessage = messages.confirmation
      .replace("{{ $–§–ò }}", session.name)
      .replace("{{ $Tel }}", session.phone)
      .replace("{{ $email }}", session.email);

    await ctx.reply(confirmationMessage, {
      reply_markup: new InlineKeyboard()
        .add({ text: "–í—Å–µ –≤–µ—Ä–Ω–æ", callback_data: "confirm_payment" })
        .row()
        .add({ text: "–ò–∑–º–µ–Ω–∏—Ç—å", callback_data: "edit_info" }),
    });

    session.step = "awaiting_confirmation";
    await session.save();
  }
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
bot.start();
